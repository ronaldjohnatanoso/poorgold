<template>
    <v-container>
      Enter the location of the store:
    </v-container>
    <v-container>
      <v-autocomplete
        label="Enter store location"
        v-model="pickedLocation"
        :items="storeArray.map((store) => store.location)"
      ></v-autocomplete>
      <v-container>
        Store Location: {{ pickedLocation }}
      </v-container>
  
      <v-card v-if="inventoryArray.length > 0" title="Product Inventory" flat>
        <template v-slot:text>
          <v-text-field
            v-model="search"
            label="Search by name of product"
            prepend-inner-icon="mdi-magnify"
            variant="outlined"
            hide-details
            single-line
          ></v-text-field>
        </template>
  
        <v-container>
          <v-btn
            v-for="header in headers"
            :key="header.value"
            @click="toggleColumn(header.value)"
            :class="{ 'header': visibleColumns.includes(header.value) }"
          >
            {{ header.title }}
          </v-btn>
        </v-container>
  
        <v-data-table
          :items="inventoryArray"
          :search="search"
          :headers="visibleHeaders"
        ></v-data-table>
      </v-card>
    </v-container>
  </template>



<script setup lang="ts">
import type { Database } from '~/lib/database.types';

definePageMeta({
    middleware: ["profile-auth"],
    layout: "topbar-layout",
})
const visibleColumns = ref([
  'id',
  'created_at',
  'name',
  'vendor_id',
  'store_id',
  'brand',
  'product_type',
  'size',
  'parent_product_type',
  'price',
  'description',
  'remaining_stock',
  'Store_id',
  'Store_location',
  'Store_time_open',
  'Store_created_at',
  'Store_contact_number',
  'Vendor_id',
  'Vendor_fullname',
  'Vendor_created_at',
  'Vendor_contact_number',
]);
const toggleColumn = (column: string) => {
  const index = visibleColumns.value.indexOf(column);
  if (index === -1) {
    visibleColumns.value.push(column);
  } else {
    visibleColumns.value.splice(index, 1);
  }
};

const visibleHeaders = computed(() => {
  return headers.filter((header) => visibleColumns.value.includes(header.value));
});


  const headers = [
  { value: 'id', title: 'ID', sortable: false },
  { value: 'created_at', title: 'Created At', sortable: false },
  { value: 'name', title: 'Name', sortable: false },
  { value: 'vendor_id', title: 'Vendor ID', sortable: false },
  { value: 'store_id', title: 'Store ID', sortable: false },
  { value: 'brand', title: 'Brand', sortable: false },
  { value: 'product_type', title: 'Product Type', sortable: false },
  { value: 'size', title: 'Size', sortable: false },
  { value: 'parent_product_type', title: 'Parent Product Type', sortable: false },
  { value: 'price', title: 'Price', sortable: false },
  { value: 'description', title: 'Description', sortable: false },
  { value: 'remaining_stock', title: 'Remaining Stock', sortable: false },
  { value: 'Store_id', title: 'Store ID', sortable: false },
  { value: 'Store_location', title: 'Store Location', sortable: false },
  { value: 'Store_time_open', title: 'Store Time Open', sortable: false },
  { value: 'Store_created_at', title: 'Store Created At', sortable: false },
  { value: 'Store_contact_number', title: 'Store Contact Number', sortable: false },
  { value: 'Vendor_id', title: 'Vendor ID', sortable: false },
  { value: 'Vendor_fullname', title: 'Vendor Full Name', sortable: false },
  { value: 'Vendor_created_at', title: 'Vendor Created At', sortable: false },
  { value: 'Vendor_contact_number', title: 'Vendor Contact Number', sortable: false },
];

  const search = ref('')
 
  

const supabase = useSupabaseClient()
const storeArray = ref<Database['public']['Tables']['Store']['Row'][]>([])
const locationArray = ref<string[]>([])
const pickedLocation = ref<string | null>(null)

//type joined from Product as base, joined by Store and Vendor
type Inventory = Database['public']['Tables']['Product']['Row'] & {
    Store: Database['public']['Tables']['Store']['Row'],
    Vendor: Database['public']['Tables']['Vendor']['Row']
}


type PropertyObject<T> = { value: T; render: boolean; propertyName: string };
type ExpandedType<T> = T extends object
    ? T extends Array<infer U>
    ? Array<ExpandedType<U>>
    : { [K in keyof T]: ExpandedType<T[K]> }
    : PropertyObject<T>;

function expandObject<T>(obj: T, parentPropertyName: string = ''): any{
    const expandedObj: any = {};
    for (const key in obj) {
        if (Object.hasOwnProperty.call(obj, key)) {
            const value = obj[key];
            const propertyName = parentPropertyName ? `${parentPropertyName}_${key}` : key;
            if (value === null) {
                expandedObj[key] = { value: null, render: true, propertyName };
            } else if (typeof value === 'object') {
                expandedObj[key] = expandObject(value, propertyName);
            } else {
                expandedObj[key] = { value, render: true, propertyName };
            }
        }
    }
    return expandedObj;
}

const handleFetchStores = async () => {
    try {
        const { data, error } = await supabase
            .from('Store')
            .select('*')

        if (error) throw error
        if (!error) {
            // console.log(data)
            storeArray.value = data
        }

        //get the locations only from the object
        locationArray.value = storeArray.value
            .filter(store => store.location !== null)
            .map(store => store.location as string);
    } catch (error) {
        console.log(error)
    }
}
const inventoryArray = ref<Inventory[]>([])

const inventoryData = ref<ExpandedType<Inventory> | null>(null)
const storeIdd = ref<string>("")
const handleFetchInventory = async () => {
    //clear the expanded array
  

    //need to get the store id from picked location
    const storeId = storeArray.value.find(store => store.location === pickedLocation.value)?.id

    try {
        const { data, error } = await supabase
            .from('Product')
            .select(`
        *,
     Store!inner(
       *
     ),
     Vendor(
       *
     )
   `)
            .match({ 'Store.id': storeId });


        if (error) throw error
        if (!error) {
            console.log(data)
            inventoryArray.value = data as Inventory[]
            //  console.log("type: " + inventoryArray )
        }
    } catch (error) {
        console.log(error)

    }

    //logMembers(inventoryArray.value[0]);

    //flattenObject(inventoryArray.value)

    for (let i = 0; i < inventoryArray.value.length; i++) {
        inventoryArray.value[i] = flattenObject(inventoryArray.value[i])
    }

    //expand the object adding render property
    // for (let i = 0; i < inventoryArray.value.length; i++) {
    //     expandedInventoryArray.value.push(expandObject(inventoryArray.value[i]))
    // }
    //given the expanded object array, i want to flatten it to one level, where nested keys are concatenated ex: Store.id.value -> Store_id.value

    //storeIdd.value = flattenedInventoryArray[0].Store_id.value
    //


    // for (let i = 0; i < expandedInventoryArray.value.length; i++) {
    //     console.log(expandedInventoryArray.value[i])
    // }

        // for(let i=0;i<expandedInventoryArray.value.length;i++){
        //     console.log(expandedInventoryArray.value[i])
        //     expandedInventoryArray.value[i].id.render = false
        // }

        // console.log("length of columns: " + expandedInventoryArray.value.length)
}

handleFetchStores()
watch(pickedLocation, handleFetchInventory)

function flattenObject(obj: any, prefix = ''): any {
    const result: { [key: string]: any } = {};

    for (const key in obj) {
        const value = obj[key];
        const newKey = prefix ? `${prefix}_${key}` : key;

        if (typeof value === 'object' && value !== null) {
            Object.assign(result, flattenObject(value, newKey));
        } else {
            result[newKey] = value;
        }
    }

    return result;
}




</script>

<style scoped>
.header {
    font-weight: bold;
    font-size: 16px;
    color: black;
    background-color: rgb(233, 176, 176);
}
</style>