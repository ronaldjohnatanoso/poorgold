by default filtering foreign tables is outer join, every table is added, those not meeting condition is just nulled, 
    we want inner join to ignore and not null those others

            async getLength(supabase: SupabaseClient<Database>) {
      try {
        const { data, error } = await supabase.from("Product").select(`
          *,
          Store!inner(*)
        `)
        .eq('Store.location', 'website')
 
        ;



//if you want to nest types inside a base type, this happens when you fetch from db with joined tables, their types are nested depending on table types so you have to set that at run time dont hard code
type first = {
  name: string,
  age: number
}

type Weighted = {
  weight: number,
  length: number
}

type wrongType = first & Weighted;



const dog : wrongType = {
  age : 23,
  name : 'dick',
  weight: 24,
  length : 23
}

type correctType = first & {Store : Weighted}

//what i want
const cat : correctType = {
  age: 23,
  name : 'dick',
  Store: {
    weight: 21,
    length : 23,
  }
}

//console out the keys of an object nested
type Measurement = {
  weight: number,
  length: number
}

type correctType = {
  age: number,
  name: string,~
  Store: Measurement
};

const cat: correctType = {
  age: 23,~
  name: 'dick',
  Store: {
    weight: 21,
    length: 23,
  }
};

function logMembers(obj: correctType) {
  const keys = Object.keys(obj) as (keyof correctType)[];
  keys.forEach(key => {
    const value = obj[key];
    if (typeof value === 'object') {
      const subKeys = Object.keys(value) as (keyof Measurement)[];
      subKeys.forEach(subKey => {
        console.log(`${key}.${subKey}`);
      });
    } else {
      console.log(`${key}`);
    }
  });
}

logMembers(cat);


//this is to expanded object keys with {value, render: boolean} to only leaf values, this adds choice whether we want to render that evne in nested
type Measurement = { weight: number, length: number }; //nested foreign table
type PropertyObject<T> = { value: T, render: boolean };
type ExpandedType<T> = T extends object ? { [K in keyof T]: ExpandedType<T[K]> } : PropertyObject<T>; 
type CorrectType = { age: number, name: string, Store: Measurement }; // base

function expandObject<T>(obj: T): ExpandedType<T> {
  const expandedObj: any = {};
  for (const key in obj) {
    if (Object.hasOwnProperty.call(obj, key)) {
      const value = obj[key];
      if (typeof value === 'object') {
        expandedObj[key] = expandObject(value);
      } else {
        expandedObj[key] = { value, render: true };
      }
    }
  }
  return expandedObj;
}

const cat: CorrectType = { age: 23, name: 'dick', Store: { weight: 21, length: 23 } };
const expandedCat: ExpandedType<CorrectType> = expandObject(cat);
console.log(expandedCat.Store.length.value); // Correct type



// to activate intellisense with types that are also wildcard
    type ExpandedInventory = {
  [Property in
    | 'id'
    | 'created_at'
    | 'name'
    | 'vendor_id'
    | 'store_id'
    | 'brand'
    | 'product_type'
    | 'size'
    | 'parent_product_type'
    | 'price'
    | 'description'
    | 'remaining_stock'
    | 'Store_id'
    | 'Store_location'
    | 'Store_time_open'
    | 'Store_created_at'
    | 'Store_contact_number'
    | 'Vendor_id'
    | 'Vendor_fullname'
    | 'Vendor_created_at'
    | 'Vendor_contact_number'
  ]: {
    value: any;
    render: boolean;
    propertyName: string;
  };